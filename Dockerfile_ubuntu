# syntax=docker/dockerfile:1.1.7-experimental
############################
# Pynv but no environments #
############################
# NOTE: If you change the image version change it also in create_builds.py
ARG IMAGE_VERSION=focal
FROM ubuntu:$IMAGE_VERSION as pyenv_clean
ENV CFLAGS='-O2' \
    DEBIAN_FRONTEND=noninteractive

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
       bash \
       cargo \
       curl \
       ca-certificates \
       git-core \
       make \
       llvm \
       build-essential \
       openssh-client \
       libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget \
       libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
    # githublab ssh
    && mkdir -p -m 0700 ~/.ssh && ssh-keyscan gitlab.com github.com | sort > ~/.ssh/known_hosts \
    # install pyenv
    && curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash \
    && echo 'export PATH="/root/.pyenv/bin:/root/.cargo/bin:$PATH"' >> /root/.profile \
    && echo 'eval "$(pyenv init --path)"' >> /root/.profile \
    && true

SHELL ["/bin/bash", "-lc"]
ENTRYPOINT ["/bin/bash", "-lc"]

##############################
# Build the version resolver #
##############################
FROM pyenv_clean as pyenv_resolve_build
COPY pyenv_resolve /build
RUN cd /build \
    && cargo build --release \
    && cargo install --path . \
    && true

###########################
# Prebuild given versions #
###########################
FROM pyenv_clean as pyenv_prebuild
COPY --from=pyenv_resolve_build /root/.cargo /root/.cargo
ARG BUILD_PYTHON_VERSIONS="3.10 3.9 3.8 3.7 3.6"
RUN export RESOLVED_VERSIONS=`pyenv_resolve $BUILD_PYTHON_VERSIONS` \
    && for pyver in $RESOLVED_VERSIONS; do pyenv install $pyver; done \
    && pyenv global $RESOLVED_VERSIONS

####################################
# Pyenv shell with default version #
####################################
FROM pyenv_prebuild as pyenv
CMD ["python"]

###############################
# tox and poetry preinstalled #
###############################
FROM pyenv as tox-base
COPY docker-entrypoint-tox.sh /
RUN python -m pip install -U tox \
    && curl -sSL https://install.python-poetry.org | python3 - \
    && echo 'export PATH="/root/.local/bin:$PATH"' >> /root/.profile \
    && true
ONBUILD COPY . /app
WORKDIR /app
ENTRYPOINT ["/docker-entrypoint-tox.sh"]
